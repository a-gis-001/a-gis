def init(
    *,
    provider: type["A_GIS.Ai._Provider.types_allowed"] = "ollama",
    model: str = "deepseek-coder:33b",
    system: str = "You are a helpful assistant.",
    mirostat=2,
    num_predict=5000,
    num_ctx=10000,
    temperature=0.5,
    messages=[],
    tool_names=[],
) -> type["A_GIS.Ai.Chatbot._Chatbot"]:
    """Initialize a chatbot with specified configuration parameters.

    This function initializes a chatbot instance with the given
    provider, model, system description, and additional configuration
    settings such as temperature, number of predictions, context window
    size, and optional messages and tool names. It also dynamically
    imports the necessary module and function based on the selected
    provider to handle sending chat messages.

    Args:
        provider (str):
            The name of the chatbot provider to use. Must be one of the
            values listed in `A_GIS.Ai._Provider.names_allowed`.
            Defaults to "ollama".
        model (str):
            The name of the AI model to use for generating responses.
            Defaults to "deepseek-coder:33b".
        system (str, optional):
            A description of the system's role or personality. Defaults
            to "You are a helpful assistant."
        mirostat (int, optional):
            A parameter that may affect the model's interpretation and
            generation of responses. Defaults to 2.
        num_predict (int, optional):
            The number of predictions the model should consider for each
            response. Defaults to 5000.
        num_ctx (int, optional):
            The size of the context window that the model considers when
            generating responses. Defaults to 10000.
        temperature (float, optional):
            A parameter controlling the randomness in the responses
            generated by the model. Defaults to 0.5.
        messages (List[str], optional):
            A list of messages that can be referenced or continued by
            the chatbot. Defaults to an empty list.
        tool_names (List[str], optional):
            A list of names for tools the chatbot may interact with.
            Defaults to an empty list.

    Returns:
        A_GIS.Ai.Chatbot._Chatbot:
            An instance of the Chatbot class, initialized with the
            specified configuration settings and ready to interact.
    """
    import A_GIS.Ai.Chatbot._Chatbot

    # Check name is allowed.
    names_allowed = A_GIS.Ai._Provider.names_allowed
    if provider not in names_allowed:
        raise ValueError(
            f"Provider={provider} not recognized! Should be one of: {names_allowed}"
        )

    # Dynamic import based on provider
    module = f"A_GIS.Ai.Chatbot._send_chat_{provider}"
    function = f"_send_chat_{provider}"
    imported_module = __import__(module, fromlist=[function])
    _send_chat = getattr(imported_module, function)
    return A_GIS.Ai.Chatbot._Chatbot(
        provider=provider,
        model=model,
        system=system,
        mirostat=mirostat,
        num_predict=num_predict,
        num_ctx=num_ctx,
        temperature=temperature,
        _send_chat=_send_chat,
        messages=messages,
        tool_names=tool_names,
        tools=[],
    )
